package com.example.sample;

import com.kpbs.AppContext;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2018-12-20T14:48:59.700+03:00
 * Generated source version: 3.2.7
 *
 */
@WebServiceClient(name = "TestJaxWsService",
                  //wsdlLocation = "file:src/main/webapp/WEB-INF/wsdl/input.wsdl",
                  targetNamespace = "http://esb.z-t-z.ru/Integration/SAP")
public class TestJaxWsService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://esb.z-t-z.ru/Integration/SAP", "TestJaxWsService");
    public final static QName TestJaxWs = new QName("http://esb.z-t-z.ru/Integration/SAP", "testJaxWs");
    static {
        URL url = null;
        try {
            //url = new URL("file:src/main/webapp/WEB-INF/wsdl/input.wsdl");
            url = new URL(AppContext.getProperty("input.wsdl"));
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TestJaxWsService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:src/main/webapp/WEB-INF/wsdl/input.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TestJaxWsService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TestJaxWsService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestJaxWsService() {
        super(WSDL_LOCATION, SERVICE);
    }





    /**
     *
     * @return
     *     returns TestJaxWs
     */
    @WebEndpoint(name = "testJaxWs")
    public TestJaxWs getTestJaxWs() {
        return super.getPort(TestJaxWs, TestJaxWs.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestJaxWs
     */
    @WebEndpoint(name = "testJaxWs")
    public TestJaxWs getTestJaxWs(WebServiceFeature... features) {
        return super.getPort(TestJaxWs, TestJaxWs.class, features);
    }

}
